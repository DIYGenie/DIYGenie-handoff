// --- ENTITLEMENTS CONFIG ---
const TIER_RULES = {
  free:   { quota: 2,  preview: false },
  casual: { quota: 5,  preview: true  },
  pro:    { quota: 25, preview: true  },
};

async function getEntitlements(supabase, userId) {
  // Get tier from profiles
  const { data: prof, error: profErr } = await supabase
    .from('profiles')
    .select('plan_tier')
    .eq('user_id', userId)
    .single();

  if (profErr && profErr.code !== 'PGRST116') {
    // return something sane if RLS or lookup issues
    return { tier: 'free', quota: 2, previewAllowed: false, remaining: 0, error: String(profErr.message || profErr) };
  }

  const tier = (prof && prof.plan_tier) || 'free';
  const rules = TIER_RULES[tier] || TIER_RULES.free;

  // Count user's projects
  const { count } = await supabase
    .from('projects')
    .select('id', { count: 'exact', head: true })
    .eq('user_id', userId);

  const used = count || 0;
  const remaining = Math.max(0, rules.quota - used);

  return {
    tier,
    quota: rules.quota,
    previewAllowed: !!rules.preview,
    remaining
  };
}

// Simple guards
async function requireQuota(req, res, next) {
  try {
    const userId = req.query.user_id || req.body.user_id || req.params.user_id || req.user_id; // be tolerant
    if (!userId) return res.status(400).json({ ok:false, error:'missing_user_id' });

    const ent = await getEntitlements(supabase, userId);
    if (ent.remaining <= 0) return res.status(403).json({ ok:false, error:'quota_exhausted', entitlements: ent });

    req.entitlements = ent;
    req.user_id = userId;
    next();
  } catch (e) {
    res.status(500).json({ ok:false, error:String(e) });
  }
}

async function requirePreviewAllowed(req, res, next) {
  try {
    const userId = req.query.user_id || req.body.user_id || req.params.user_id || req.user_id;
    if (!userId) return res.status(400).json({ ok:false, error:'missing_user_id' });

    const ent = await getEntitlements(supabase, userId);
    if (!ent.previewAllowed) return res.status(403).json({ ok:false, error:'preview_not_in_plan', entitlements: ent });

    req.entitlements = ent;
    req.user_id = userId;
    next();
  } catch (e) {
    res.status(500).json({ ok:false, error:String(e) });
  }
}
Expose entitlements endpoint (add in server.js routes):

js
Copy code
// GET /me/entitlements/:userId
app.get('/me/entitlements/:userId', async (req, res) => {
  try {
    const userId = req.params.userId;
    if (!userId) return res.status(400).json({ ok:false, error:'missing_user_id' });
    const ent = await getEntitlements(supabase, userId);
    res.json({ ok:true, ...ent });
  } catch (e) {
    res.status(500).json({ ok:false, error:String(e) });
  }
});
Guard your existing actions:

When creating a project or building without preview, use requireQuota

When kicking preview, use requirePreviewAllowed

Example (adapt to your existing handlers):

js
Copy code
// Create project
app.post('/api/projects', requireQuota, async (req, res) => {
  try {
    const { name, user_id, budget, skill_level } = req.body;
    if (!user_id) return res.status(400).json({ ok:false, error:'missing_user_id' });

    const { data, error } = await supabase
      .from('projects')
      .insert([{ user_id, name, budget, skill_level, status: 'draft' }])
      .select()
      .single();

    if (error) return res.status(500).json({ ok:false, error:String(error.message || error) });
    res.json({ ok:true, project: data });
  } catch (e) {
    res.status(500).json({ ok:false, error:String(e) });
  }
});

// Build without preview – allowed for all tiers but consumes quota
app.post('/api/projects/:id/build-without-preview', requireQuota, async (req, res) => {
  try {
    const { id } = req.params;
    // respond immediately
    res.json({ ok:true });
    // flip status soon after
    setTimeout(async () => {
      await supabase.from('projects').update({ status: 'plan_ready' }).eq('id', id);
    }, 1000);
  } catch {}
});

// Generate preview – only if plan allows
app.post('/api/projects/:id/preview', requirePreviewAllowed, async (req, res) => {
  try {
    const { id } = req.params;
    // respond immediately
    res.json({ ok:true });
    // simulate generation then flip
    setTimeout(async () => {
      await supabase.from('projects').update({ status: 'preview_ready', preview_url: null }).eq('id', id);
    }, 5000);
  } catch {}
});
Keep your image upload route as-is; it doesn’t need a tier guard. The actions (preview/build) are guarded.